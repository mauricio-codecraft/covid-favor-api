org: mauriciocoder
app: covid-favor
# We are using JEST for testing: https://jestjs.io/docs/en/getting-started.html - npm test
service: covid-favor-app-api

# Create an optimized package for our functions
package:
  individually: true

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Handler
  - ${file(resources/api-gateway-handler.yml)}
  # DynamoDb Handler
  - ${file(resources/dynamodb-handler.yml)}

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  authorizer:
    dev: 
    prod: aws_iam
  dynamodb:
    stages: dev
    start:
      port: 8000 # always se port 8000, otherwise serverless-dynamodb-client will not find
      migrate: true # creates tables from serverless config
      seed: true # determines which data to onload
    seed:
      domain:
        sources:
          - table: userAccount
            sources: [./resources/migrations/v0.json]

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    helpTableName: help
    userAccountTableName: userAccount

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

  # These are the usage plan for throttling
  usagePlan:
    throttle:
        burstLimit: 2
        rateLimit: 1

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /help
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create-help:
    handler: functions/help/create.main
    events:
      - http:
          path: help
          method: post
          cors: true
          authorizer: ${self:custom.authorizer.${opt:stage, self:provider.stage}}

  # Defines an HTTP API endpoint that calls the main function in list.js
  # - path: url path is /help
  # - method: GET request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  list-help:
    handler: functions/help/list.main
    events:
      - http:
          path: help
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.${opt:stage, self:provider.stage}}

  # Defines an HTTP API endpoint that calls the main function in list.js
  # - path: url path is help
  # - method: DELETE request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  delete-help:
    handler: functions/help/delete.main
    events:
      - http:
          path: help
          method: delete
          cors: true
          authorizer: ${self:custom.authorizer.${opt:stage, self:provider.stage}}

  # Defines an HTTP API endpoint that calls the main function in list.js
  # - path: url path is help
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  accept-help:
    handler: functions/help/accept.main
    events:
      - http:
          path: help/accept
          method: post
          cors: true
          authorizer: ${self:custom.authorizer.${opt:stage, self:provider.stage}}

  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /user-account
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create-user-account:
    handler: functions/user-account/create.main
    events:
      - http:
          path: user-account
          method: post
          cors: true
          authorizer: ${self:custom.authorizer.${opt:stage, self:provider.stage}}

  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /user-account/read
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  read-user-account:
    handler: functions/user-account/read.main
    events:
      - http:
          path: user-account
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.${opt:stage, self:provider.stage}}